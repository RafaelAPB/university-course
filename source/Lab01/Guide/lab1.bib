@techreport{,
abstract = {Distributed messaging systems form the core of big data streaming, cloud native applications and microservice architecture. With real-time critical applications there is a growing need for well-built messaging platform that is scalable, fault tolerant and has low latency. There are multiple modern messaging systems that have come up in the recent past, all with their own pros and cons. This has become problematic for the industry to decide which messaging system is the most suitable for a specific application. An in-depth study is required to decide which features of a messaging system meet the needs of the application. This survey paper outlines the modern messaging technologies and delves deep on three popular publisher/subscriber systems-Apache Kafka, RabbitMQ and NATS Streaming. The paper provides information about messaging systems, the use cases, similarities and differences of features to facilitate users to make an informed decision and also pave way for future research and development.},
file = {:C$\backslash$:/Users/rafae/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Unknown - Unknown - A study on Modern Messaging Systems-Kafka, RabbitMQ and NATS Streaming.pdf:pdf},
keywords = {Apache Kafka,NATS,RabbitMQ,commit log,distributed messaging systems,publisher-subscriber systems},
title = {{A study on Modern Messaging Systems-Kafka, RabbitMQ and NATS Streaming}}
}
@misc{Wong2014,
author = {Wong, Bernard},
title = {{CS454/654 Distributed Systems}},
url = {https://cs.uwaterloo.ca/~bernard/courses/cs454/0.Begin.pdf},
urldate = {2020-06-20},
year = {2014}
}
@misc{Ousterhout_presentation,
author = {Ousterhout, John and Ongaro, Diego},
title = {{Designing for Understandability: The Raft Consensus Algorithm - YouTube}},
url = {https://www.youtube.com/watch?v=vYp4LYbnnW8},
urldate = {2020-06-22},
year = {2016}
}
@book{Verissimo2001,
abstract = {Distributed Systems for System Architects addresses these issues.},
author = {Veriissimo, Paulo and Rodrigues, Luis},
doi = {10.1007/978-1-4615-1663-7},
file = {:C$\backslash$:/Users/rafae/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Ver'issimo, Rodrigues - 2001 - Distributed systems for system architects.pdf:pdf},
isbn = {978-0792372660},
keywords = {Computers},
pages = {623},
title = {{Distributed systems for system architects}},
url = {http://www.google.com/books?hl=en{\&}lr={\&}id=oOzwLX1{\_}bpkC{\&}oi=fnd{\&}pg=PR13{\&}dq=Distributed+systems+for+system+architects{\&}ots=AoTDFJClxL{\&}sig=AZVUrUivDNOc{\_}hFwZLB9S2zrKYQ},
year = {2001}
}
@book{dscd,
address = {USA},
author = {Coulouris, George and Dollimore, Jean and Kindberg, Tim and Blair, Gordon},
edition = {5th},
isbn = {0132143011},
publisher = {Addison-Wesley Publishing Company},
title = {{Distributed Systems: Concepts and Design}},
year = {2011}
}
@article{correia2019byzantine,
author = {Correia, Miguel},
file = {:C$\backslash$:/Users/rafae/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Correia - 2019 - From Byzantine Consensus to Blockchain Consensus(2).pdf:pdf},
journal = {Essentials of Blockchain Technology},
keywords = {INCLUDED{\_}AFTER,Support},
mendeley-tags = {INCLUDED{\_}AFTER,Support},
pages = {41},
title = {{From Byzantine Consensus to Blockchain Consensus}},
year = {2019}
}
@inproceedings{raft_paper,
author = {Ongaro, Diego and Ousterhout, John},
booktitle = {USENIX Annual Technical Conference},
title = {{In Search of an Understandable Consensus Algorithm}},
year = {2014}
}
@misc{sdist2017,
author = "{T{\'{e}}cnico Lisboa}",
title = {{Initial Page {\textperiodcentered} Distributed Systems}},
url = {https://fenix.tecnico.ulisboa.pt/disciplinas/SDis12645111326/2016-2017/2-semestre},
urldate = {2020-06-20},
year = {2017}
}
@article{Kreps,
author = {Kreps, Jay and Kreps, Jay and Corp, Linkedin and Narkhede, Neha and Rao, Jun and Corp, Linkedin},
file = {:C$\backslash$:/Users/rafae/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Kreps et al. - Unknown - Kafka a distributed messaging system for log processing. NetDB'11.pdf:pdf},
title = {{Kafka: a distributed messaging system for log processing. NetDB'11}},
url = {https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.233.1726}
}
@misc{looneytech,
title = {{Leader Election and Log Replication in Raft – Part 1 – Loonytek – Delving into Tech}},
url = {https://loonytek.com/2015/10/18/leader-election-and-log-replication-in-raft-part-1/},
urldate = {2020-06-22}
}
@misc{raft_viz,
author = {Johnson, Ben},
title = {{Raft - Understandable Distributed Consensus}},
url = {http://thesecretlivesofdata.com/raft/},
urldate = {2020-06-21},
year = {2013}
}
@misc{raft_homepage,
author = {RAFT},
title = {{Raft Consensus Algorithm}},
url = {https://raft.github.io/},
urldate = {2020-06-21},
year = {2016}
}
@article{raft_paper_apps,
abstract = {Raft consensus algorithm is one of the commonly used consensus algorithms in distributed systems. It is mainly used to manage the consistency of log replication. It has the same function as Paxos, but compared to Paxos, Raft algorithm is easier to understand and easier to apply to actual systems. The Raft algorithm is a consensus algorithm adopted by the alliance chain. This article describes the details of Raft consensus algorithm and its application in detail.},
author = {Hu, Junjie and Liu, Ke},
doi = {10.1088/1742-6596/1544/1/012079},
file = {:C$\backslash$:/Users/rafae/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Hu, Liu - 2020 - Raft consensus mechanism and the applications.pdf:pdf},
journal = {Journal of Physics: Conference Series},
keywords = {affordable,fast,flexible,open access,proceedings,template},
pages = {12079},
publisher = {IOP Publishing},
title = {{Raft consensus mechanism and the applications}},
volume = {1544},
year = {2020}
}
@misc{replicated,
title = {Replicated state machines},
author = {Ongaro, Diego and Ousterhout, John},
url = {https://image3.slideserve.com/5547558/replicated-state-machines-l.jpg},
urldate = {2020-06-21}
}

@misc{mit,
title = {6.824: Distributed Systems - MIT},
url = {https://pdos.csail.mit.edu/6.824/},
urldate = {2020-06-21}
}

@misc{princeton,
title = {COS-418, Fall 2016: Distributed Systems - Princeton},
url = {https://www.cs.princeton.edu/courses/archive/fall16/cos418/index.html},
urldate = {2020-06-21}
}



@techreport{byzantine_generals,
abstract = {Reliable computer systems must handle malfunctioning components that give conflicting information to different parts of the system. This situation can be expressed abstractly in terms of a group of generals of the Byzantine army camped with their troops around an enemy city. Communicating only by messenger, the generals must agree upon a common battle plan. However, one or more of them may be traitors who will try to confuse the others. The problem is to find an algorithm to ensure that the loyal generals will reach agreement. It is shown that, using only oral messages, this problem is solvable if and only if more than two-thirds of the generals are loyal; so a single traitor can confound two loyal generals. With unforgeable written messages, the problem is solvable for any number of generals and possible traitors. Applications of the solutions to reliable computer systems are then discussed.},
author = {Lamport, Leslie and Shostak, Robert and Pease, Marshall},
file = {:C$\backslash$:/Users/rafae/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Lamport, Shostak, Pease - 1982 - The Byzantine Generals Problem.pdf:pdf},
keywords = {C24 [Computer-Communication Networks]: Distributed,D44 [Operating Systems]: Communications Management,D45 [Operating Systems]: Reliability-fault toleran,Reliability Additional Key Words and Phrases: Inte},
title = {{The Byzantine Generals Problem}},
url = {https://people.eecs.berkeley.edu/{~}luca/cs174/byzantine.pdf},
year = {1982}
}
